---
import "../styles/global.css";
import "~/styles/app.css";
import { ViewTransitions } from "astro:transitions";

interface Props {
  title?: string | undefined;
  description?: string | undefined;
}

const {
  title = "Kyle Olmstead: Personal Site",
  description = "The personal site of Kyle Olmstead",
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width" />
<title>{title}</title>
<meta name="description" property="og:description" content={description} />
<meta name="generator" content={Astro.generator} />

<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
  href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
  rel="stylesheet"
/>

<script is:inline>
const getThemePreference = () => {
	if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
		return localStorage.getItem("theme");
	}
	return window.matchMedia("(prefers-color-scheme: dark)").matches
		? "dark"
		: "light";
};

const isDark = getThemePreference() === "dark";
document.documentElement.classList[ isDark ? "add" : "remove" ]("theme-dark");

if (typeof localStorage !== "undefined" && !window.themeObserver) {
	const observer = new MutationObserver(() => {
		const isDark = document.documentElement.classList.contains("theme-dark");
		localStorage.setItem("theme", isDark ? "dark" : "light");
	});

	observer.observe(document.documentElement, {
		attributes: true,
		attributeFilter: [ "class" ],
	});

	window.themeObserver = observer;
}
</script>
